{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\react-app\\\\src\\\\context\\\\ThemeProvider.jsx\";\nimport React from 'react';\nimport { lightTheme, darkTheme } from '../theme/Theme';\nimport { createContext, useState, useContext, useCallback } from 'react';\nimport { ThemeProvider as StyledProvider } from 'styled-components';\n\n/*\r\n    Provider 컴포넌트를 제공하게 될 context 객체를 생성\r\n    테마 관련 정보를 하위 컴포넌트들에게 전달\r\n*/\nconst ThemeContext = createContext('light');\nconst ThemeProvider = ({\n  children\n}) => {\n  // 로컬 저장소에 저장된 현재 테마 모드 상태값을 가져옴\n  const localTheme = localStorage.getItem(\"localTheme\");\n  // 테마 모드 상태 & 테마 변경 함수\n  const [ThemeMode, setThemeMode] = useState(localTheme) || \"light\";\n  // 현재 테마 선택\n  const theme = ThemeMode === \"light\" ? lightTheme : darkTheme;\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: {\n      ThemeMode,\n      setThemeMode\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StyledProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, children));\n};\n\n// custom hook을 통해 테마의 토글 기능 처리\nfunction useTheme() {\n  /*\r\n     useContext는 context 객체를 인수로 전달 받아 해당 context의 현재 값을 반환하며,\r\n     useContext를 호출한 컴포넌트는 해당 context의 값이 변경될 때마다 리렌더링됨\r\n  */\n  const context = useContext(ThemeContext);\n  const {\n    ThemeMode,\n    setThemeMode\n  } = context;\n  const toggleTheme = useCallback(() => {\n    if (ThemeMode === \"light\") {\n      setThemeMode(\"dark\");\n      localStorage.setItem(\"localTheme\", \"dark\");\n    } else {\n      setThemeMode(\"light\");\n      localStorage.setItem(\"localTheme\", \"light\");\n    }\n    ;\n  }, [ThemeMode, setThemeMode]);\n  return [ThemeMode, toggleTheme];\n}\nexport { ThemeProvider, useTheme };","map":{"version":3,"names":["React","lightTheme","darkTheme","createContext","useState","useContext","useCallback","ThemeProvider","StyledProvider","ThemeContext","children","localTheme","localStorage","getItem","ThemeMode","setThemeMode","theme","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","useTheme","context","toggleTheme","setItem"],"sources":["C:/Users/USER/Desktop/react-app/src/context/ThemeProvider.jsx"],"sourcesContent":["import React from 'react';\r\nimport { lightTheme, darkTheme } from '../theme/Theme';\r\nimport { createContext, useState, useContext, useCallback } from 'react';\r\nimport { ThemeProvider as StyledProvider} from 'styled-components'; \r\n\r\n/*\r\n    Provider 컴포넌트를 제공하게 될 context 객체를 생성\r\n    테마 관련 정보를 하위 컴포넌트들에게 전달\r\n*/\r\nconst ThemeContext = createContext('light'); \r\n\r\nconst ThemeProvider = ({children}) => {\r\n    // 로컬 저장소에 저장된 현재 테마 모드 상태값을 가져옴\r\n    const localTheme = localStorage.getItem(\"localTheme\");\r\n    // 테마 모드 상태 & 테마 변경 함수\r\n    const [ThemeMode, setThemeMode] = useState(localTheme) || \"light\";\r\n    // 현재 테마 선택\r\n    const theme = ThemeMode === \"light\" ? lightTheme : darkTheme;\r\n    \r\n    return(\r\n        <ThemeContext.Provider value={{ThemeMode, setThemeMode}}>\r\n            {/* styled-components로 작성된 모든 컴포넌트에서 theme 객체를 사용하여 스타일 설정*/}\r\n            <StyledProvider theme={theme}>\r\n                {children}\r\n            </StyledProvider>\r\n        </ThemeContext.Provider>\r\n    );\r\n}\r\n\r\n// custom hook을 통해 테마의 토글 기능 처리\r\nfunction useTheme() {\r\n    /*\r\n       useContext는 context 객체를 인수로 전달 받아 해당 context의 현재 값을 반환하며,\r\n       useContext를 호출한 컴포넌트는 해당 context의 값이 변경될 때마다 리렌더링됨\r\n    */\r\n    const context = useContext(ThemeContext);\r\n    const {ThemeMode, setThemeMode} = context;\r\n   \r\n    const toggleTheme = useCallback(()=>{\r\n        if(ThemeMode === \"light\"){\r\n            setThemeMode(\"dark\");\r\n            localStorage.setItem(\"localTheme\", \"dark\");\r\n        }\r\n        else{\r\n            setThemeMode(\"light\");\r\n            localStorage.setItem(\"localTheme\", \"light\");\r\n        };\r\n    }, [ThemeMode, setThemeMode]);\r\n\r\n    return [ThemeMode, toggleTheme];\r\n}\r\n\r\nexport {ThemeProvider, useTheme};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,EAAEC,SAAS,QAAQ,gBAAgB;AACtD,SAASC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,QAAQ,OAAO;AACxE,SAASC,aAAa,IAAIC,cAAc,QAAO,mBAAmB;;AAElE;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAGN,aAAa,CAAC,OAAO,CAAC;AAE3C,MAAMI,aAAa,GAAGA,CAAC;EAACG;AAAQ,CAAC,KAAK;EAClC;EACA,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EACrD;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAACO,UAAU,CAAC,IAAI,OAAO;EACjE;EACA,MAAMK,KAAK,GAAGF,SAAS,KAAK,OAAO,GAAGb,UAAU,GAAGC,SAAS;EAE5D,oBACIF,KAAA,CAAAiB,aAAA,CAACR,YAAY,CAACS,QAAQ;IAACC,KAAK,EAAE;MAACL,SAAS;MAAEC;IAAY,CAAE;IAAAK,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAEpDzB,KAAA,CAAAiB,aAAA,CAACT,cAAc;IAACQ,KAAK,EAAEA,KAAM;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACxBf,QACW,CACG,CAAC;AAEhC,CAAC;;AAED;AACA,SAASgB,QAAQA,CAAA,EAAG;EAChB;AACJ;AACA;AACA;EACI,MAAMC,OAAO,GAAGtB,UAAU,CAACI,YAAY,CAAC;EACxC,MAAM;IAACK,SAAS;IAAEC;EAAY,CAAC,GAAGY,OAAO;EAEzC,MAAMC,WAAW,GAAGtB,WAAW,CAAC,MAAI;IAChC,IAAGQ,SAAS,KAAK,OAAO,EAAC;MACrBC,YAAY,CAAC,MAAM,CAAC;MACpBH,YAAY,CAACiB,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;IAC9C,CAAC,MACG;MACAd,YAAY,CAAC,OAAO,CAAC;MACrBH,YAAY,CAACiB,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC;IAC/C;IAAC;EACL,CAAC,EAAE,CAACf,SAAS,EAAEC,YAAY,CAAC,CAAC;EAE7B,OAAO,CAACD,SAAS,EAAEc,WAAW,CAAC;AACnC;AAEA,SAAQrB,aAAa,EAAEmB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}